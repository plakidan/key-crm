<?php
/**
 * CreateNewOrderImportRequestOrdersInnerShipping
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KeyCRM OpenAPI documentation
 *
 * Опис REST маршрутів для роботи з KeyCRM OpenAPI.<br><br> <b>Зверніть увагу:</b> <br> 1. Для авторизації потрібно передавати заголовок у форматі Bearer + <a href=\"https://help.keycrm.app/uk/process-automation-api-and-more/where-to-get-an-api-key\" target=\"_blank\">APIkey</a> (authorization:[Bearer `ваш-API-ключ`]); <br> 2. Є обмеження до 60 запитів на хвилину з однієї IP-адреси по API-ключу; <br> 3. Час у всіх сутностях використовується UTC (GMT+0) - при зчитуванні (GET-запити), при виборі (фільтрації) по часу створення сутності, а також при створенні сутностей (POST).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateNewOrderImportRequestOrdersInnerShipping Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateNewOrderImportRequestOrdersInnerShipping implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createNewOrderImport_request_orders_inner_shipping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delivery_service_id' => 'int',
        'tracking_code' => 'string',
        'shipping_address_city' => 'string',
        'shipping_address_country' => 'string',
        'shipping_address_region' => 'string',
        'shipping_address_zip' => 'string',
        'shipping_secondary_line' => 'string',
        'shipping_receive_point' => 'string',
        'recipient_full_name' => 'string',
        'recipient_phone' => 'string',
        'warehouse_ref' => 'string',
        'shipping_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delivery_service_id' => null,
        'tracking_code' => null,
        'shipping_address_city' => null,
        'shipping_address_country' => null,
        'shipping_address_region' => null,
        'shipping_address_zip' => null,
        'shipping_secondary_line' => null,
        'shipping_receive_point' => null,
        'recipient_full_name' => null,
        'recipient_phone' => null,
        'warehouse_ref' => null,
        'shipping_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'delivery_service_id' => true,
        'tracking_code' => true,
        'shipping_address_city' => true,
        'shipping_address_country' => true,
        'shipping_address_region' => true,
        'shipping_address_zip' => true,
        'shipping_secondary_line' => false,
        'shipping_receive_point' => true,
        'recipient_full_name' => true,
        'recipient_phone' => true,
        'warehouse_ref' => true,
        'shipping_date' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_service_id' => 'delivery_service_id',
        'tracking_code' => 'tracking_code',
        'shipping_address_city' => 'shipping_address_city',
        'shipping_address_country' => 'shipping_address_country',
        'shipping_address_region' => 'shipping_address_region',
        'shipping_address_zip' => 'shipping_address_zip',
        'shipping_secondary_line' => 'shipping_secondary_line',
        'shipping_receive_point' => 'shipping_receive_point',
        'recipient_full_name' => 'recipient_full_name',
        'recipient_phone' => 'recipient_phone',
        'warehouse_ref' => 'warehouse_ref',
        'shipping_date' => 'shipping_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_service_id' => 'setDeliveryServiceId',
        'tracking_code' => 'setTrackingCode',
        'shipping_address_city' => 'setShippingAddressCity',
        'shipping_address_country' => 'setShippingAddressCountry',
        'shipping_address_region' => 'setShippingAddressRegion',
        'shipping_address_zip' => 'setShippingAddressZip',
        'shipping_secondary_line' => 'setShippingSecondaryLine',
        'shipping_receive_point' => 'setShippingReceivePoint',
        'recipient_full_name' => 'setRecipientFullName',
        'recipient_phone' => 'setRecipientPhone',
        'warehouse_ref' => 'setWarehouseRef',
        'shipping_date' => 'setShippingDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_service_id' => 'getDeliveryServiceId',
        'tracking_code' => 'getTrackingCode',
        'shipping_address_city' => 'getShippingAddressCity',
        'shipping_address_country' => 'getShippingAddressCountry',
        'shipping_address_region' => 'getShippingAddressRegion',
        'shipping_address_zip' => 'getShippingAddressZip',
        'shipping_secondary_line' => 'getShippingSecondaryLine',
        'shipping_receive_point' => 'getShippingReceivePoint',
        'recipient_full_name' => 'getRecipientFullName',
        'recipient_phone' => 'getRecipientPhone',
        'warehouse_ref' => 'getWarehouseRef',
        'shipping_date' => 'getShippingDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('delivery_service_id', $data ?? [], null);
        $this->setIfExists('tracking_code', $data ?? [], null);
        $this->setIfExists('shipping_address_city', $data ?? [], null);
        $this->setIfExists('shipping_address_country', $data ?? [], null);
        $this->setIfExists('shipping_address_region', $data ?? [], null);
        $this->setIfExists('shipping_address_zip', $data ?? [], null);
        $this->setIfExists('shipping_secondary_line', $data ?? [], null);
        $this->setIfExists('shipping_receive_point', $data ?? [], null);
        $this->setIfExists('recipient_full_name', $data ?? [], null);
        $this->setIfExists('recipient_phone', $data ?? [], null);
        $this->setIfExists('warehouse_ref', $data ?? [], null);
        $this->setIfExists('shipping_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_service_id
     *
     * @return int|null
     */
    public function getDeliveryServiceId()
    {
        return $this->container['delivery_service_id'];
    }

    /**
     * Sets delivery_service_id
     *
     * @param int|null $delivery_service_id ID служби доставки у KeyCRM
     *
     * @return self
     */
    public function setDeliveryServiceId($delivery_service_id)
    {
        if (is_null($delivery_service_id)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_service_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_service_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_service_id'] = $delivery_service_id;

        return $this;
    }

    /**
     * Gets tracking_code
     *
     * @return string|null
     */
    public function getTrackingCode()
    {
        return $this->container['tracking_code'];
    }

    /**
     * Sets tracking_code
     *
     * @param string|null $tracking_code Трек-номер відправлення служби доставки
     *
     * @return self
     */
    public function setTrackingCode($tracking_code)
    {
        if (is_null($tracking_code)) {
            array_push($this->openAPINullablesSetToNull, 'tracking_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tracking_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tracking_code'] = $tracking_code;

        return $this;
    }

    /**
     * Gets shipping_address_city
     *
     * @return string|null
     */
    public function getShippingAddressCity()
    {
        return $this->container['shipping_address_city'];
    }

    /**
     * Sets shipping_address_city
     *
     * @param string|null $shipping_address_city shipping_address_city
     *
     * @return self
     */
    public function setShippingAddressCity($shipping_address_city)
    {
        if (is_null($shipping_address_city)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_address_city'] = $shipping_address_city;

        return $this;
    }

    /**
     * Gets shipping_address_country
     *
     * @return string|null
     */
    public function getShippingAddressCountry()
    {
        return $this->container['shipping_address_country'];
    }

    /**
     * Sets shipping_address_country
     *
     * @param string|null $shipping_address_country shipping_address_country
     *
     * @return self
     */
    public function setShippingAddressCountry($shipping_address_country)
    {
        if (is_null($shipping_address_country)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_address_country'] = $shipping_address_country;

        return $this;
    }

    /**
     * Gets shipping_address_region
     *
     * @return string|null
     */
    public function getShippingAddressRegion()
    {
        return $this->container['shipping_address_region'];
    }

    /**
     * Sets shipping_address_region
     *
     * @param string|null $shipping_address_region Область, штат, регіон
     *
     * @return self
     */
    public function setShippingAddressRegion($shipping_address_region)
    {
        if (is_null($shipping_address_region)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_address_region'] = $shipping_address_region;

        return $this;
    }

    /**
     * Gets shipping_address_zip
     *
     * @return string|null
     */
    public function getShippingAddressZip()
    {
        return $this->container['shipping_address_zip'];
    }

    /**
     * Sets shipping_address_zip
     *
     * @param string|null $shipping_address_zip shipping_address_zip
     *
     * @return self
     */
    public function setShippingAddressZip($shipping_address_zip)
    {
        if (is_null($shipping_address_zip)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address_zip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address_zip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_address_zip'] = $shipping_address_zip;

        return $this;
    }

    /**
     * Gets shipping_secondary_line
     *
     * @return string|null
     */
    public function getShippingSecondaryLine()
    {
        return $this->container['shipping_secondary_line'];
    }

    /**
     * Sets shipping_secondary_line
     *
     * @param string|null $shipping_secondary_line shipping_secondary_line
     *
     * @return self
     */
    public function setShippingSecondaryLine($shipping_secondary_line)
    {
        if (is_null($shipping_secondary_line)) {
            throw new \InvalidArgumentException('non-nullable shipping_secondary_line cannot be null');
        }
        $this->container['shipping_secondary_line'] = $shipping_secondary_line;

        return $this;
    }

    /**
     * Gets shipping_receive_point
     *
     * @return string|null
     */
    public function getShippingReceivePoint()
    {
        return $this->container['shipping_receive_point'];
    }

    /**
     * Sets shipping_receive_point
     *
     * @param string|null $shipping_receive_point Точка видачі замовлення
     *
     * @return self
     */
    public function setShippingReceivePoint($shipping_receive_point)
    {
        if (is_null($shipping_receive_point)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_receive_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_receive_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_receive_point'] = $shipping_receive_point;

        return $this;
    }

    /**
     * Gets recipient_full_name
     *
     * @return string|null
     */
    public function getRecipientFullName()
    {
        return $this->container['recipient_full_name'];
    }

    /**
     * Sets recipient_full_name
     *
     * @param string|null $recipient_full_name Ім'я отримувача (якщо відрізняється від покупця)
     *
     * @return self
     */
    public function setRecipientFullName($recipient_full_name)
    {
        if (is_null($recipient_full_name)) {
            array_push($this->openAPINullablesSetToNull, 'recipient_full_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipient_full_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipient_full_name'] = $recipient_full_name;

        return $this;
    }

    /**
     * Gets recipient_phone
     *
     * @return string|null
     */
    public function getRecipientPhone()
    {
        return $this->container['recipient_phone'];
    }

    /**
     * Sets recipient_phone
     *
     * @param string|null $recipient_phone Номер телефону отримувача (якщо відрізняється від покупця). Рекомендуємо передавати в міжнародному форматі з плюсом.
     *
     * @return self
     */
    public function setRecipientPhone($recipient_phone)
    {
        if (is_null($recipient_phone)) {
            array_push($this->openAPINullablesSetToNull, 'recipient_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipient_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recipient_phone'] = $recipient_phone;

        return $this;
    }

    /**
     * Gets warehouse_ref
     *
     * @return string|null
     */
    public function getWarehouseRef()
    {
        return $this->container['warehouse_ref'];
    }

    /**
     * Sets warehouse_ref
     *
     * @param string|null $warehouse_ref UUID складу Нової Пошти (обов'язково з параметром delivery_service_id - ID служби доставки НП в СРМ)
     *
     * @return self
     */
    public function setWarehouseRef($warehouse_ref)
    {
        if (is_null($warehouse_ref)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse_ref');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse_ref', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warehouse_ref'] = $warehouse_ref;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return string|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param string|null $shipping_date Дата доставки / відправки
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        if (is_null($shipping_date)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


