<?php
/**
 * OrderWithIncludesProductsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KeyCRM OpenAPI documentation
 *
 * Опис REST маршрутів для роботи з KeyCRM OpenAPI.<br><br> <b>Зверніть увагу:</b> <br> 1. Для авторизації потрібно передавати заголовок у форматі Bearer + <a href=\"https://help.keycrm.app/uk/process-automation-api-and-more/where-to-get-an-api-key\" target=\"_blank\">APIkey</a> (authorization:[Bearer `ваш-API-ключ`]); <br> 2. Є обмеження до 60 запитів на хвилину з однієї IP-адреси по API-ключу; <br> 3. Час у всіх сутностях використовується UTC (GMT+0) - при зчитуванні (GET-запити), при виборі (фільтрації) по часу створення сутності, а також при створенні сутностей (POST).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderWithIncludesProductsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderWithIncludesProductsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderWithIncludes_products_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'sku' => 'string',
        'price' => 'float',
        'price_sold' => 'float',
        'purchased_price' => 'float',
        'discount_percent' => 'float',
        'discount_amount' => 'float',
        'total_discount' => 'float',
        'quantity' => 'float',
        'unit_type' => 'string',
        'upsale' => 'bool',
        'comment' => 'string',
        'product_status_id' => 'int',
        'picture' => 'string',
        'properties' => '\OpenAPI\Client\Model\CreateNewOrderRequestProductsInnerPropertiesInner[]',
        'shipment_type' => 'string',
        'warehouse' => '\OpenAPI\Client\Model\OrderWithIncludesProductsInnerWarehouse',
        'offer' => '\OpenAPI\Client\Model\OrderWithIncludesProductsInnerOffer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'sku' => null,
        'price' => null,
        'price_sold' => null,
        'purchased_price' => null,
        'discount_percent' => null,
        'discount_amount' => null,
        'total_discount' => null,
        'quantity' => null,
        'unit_type' => null,
        'upsale' => null,
        'comment' => null,
        'product_status_id' => null,
        'picture' => null,
        'properties' => null,
        'shipment_type' => null,
        'warehouse' => null,
        'offer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'sku' => false,
        'price' => false,
        'price_sold' => false,
        'purchased_price' => false,
        'discount_percent' => true,
        'discount_amount' => true,
        'total_discount' => true,
        'quantity' => false,
        'unit_type' => true,
        'upsale' => false,
        'comment' => false,
        'product_status_id' => false,
        'picture' => true,
        'properties' => false,
        'shipment_type' => false,
        'warehouse' => false,
        'offer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'sku' => 'sku',
        'price' => 'price',
        'price_sold' => 'price_sold',
        'purchased_price' => 'purchased_price',
        'discount_percent' => 'discount_percent',
        'discount_amount' => 'discount_amount',
        'total_discount' => 'total_discount',
        'quantity' => 'quantity',
        'unit_type' => 'unit_type',
        'upsale' => 'upsale',
        'comment' => 'comment',
        'product_status_id' => 'product_status_id',
        'picture' => 'picture',
        'properties' => 'properties',
        'shipment_type' => 'shipment_type',
        'warehouse' => 'warehouse',
        'offer' => 'offer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'sku' => 'setSku',
        'price' => 'setPrice',
        'price_sold' => 'setPriceSold',
        'purchased_price' => 'setPurchasedPrice',
        'discount_percent' => 'setDiscountPercent',
        'discount_amount' => 'setDiscountAmount',
        'total_discount' => 'setTotalDiscount',
        'quantity' => 'setQuantity',
        'unit_type' => 'setUnitType',
        'upsale' => 'setUpsale',
        'comment' => 'setComment',
        'product_status_id' => 'setProductStatusId',
        'picture' => 'setPicture',
        'properties' => 'setProperties',
        'shipment_type' => 'setShipmentType',
        'warehouse' => 'setWarehouse',
        'offer' => 'setOffer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'sku' => 'getSku',
        'price' => 'getPrice',
        'price_sold' => 'getPriceSold',
        'purchased_price' => 'getPurchasedPrice',
        'discount_percent' => 'getDiscountPercent',
        'discount_amount' => 'getDiscountAmount',
        'total_discount' => 'getTotalDiscount',
        'quantity' => 'getQuantity',
        'unit_type' => 'getUnitType',
        'upsale' => 'getUpsale',
        'comment' => 'getComment',
        'product_status_id' => 'getProductStatusId',
        'picture' => 'getPicture',
        'properties' => 'getProperties',
        'shipment_type' => 'getShipmentType',
        'warehouse' => 'getWarehouse',
        'offer' => 'getOffer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('price_sold', $data ?? [], null);
        $this->setIfExists('purchased_price', $data ?? [], null);
        $this->setIfExists('discount_percent', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('total_discount', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('upsale', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('product_status_id', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], null);
        $this->setIfExists('shipment_type', $data ?? [], null);
        $this->setIfExists('warehouse', $data ?? [], null);
        $this->setIfExists('offer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Назва товару
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Артикул товару
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Ціна товару за одиницю
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets price_sold
     *
     * @return float|null
     */
    public function getPriceSold()
    {
        return $this->container['price_sold'];
    }

    /**
     * Sets price_sold
     *
     * @param float|null $price_sold Ціна товару продажу за одиницю
     *
     * @return self
     */
    public function setPriceSold($price_sold)
    {
        if (is_null($price_sold)) {
            throw new \InvalidArgumentException('non-nullable price_sold cannot be null');
        }
        $this->container['price_sold'] = $price_sold;

        return $this;
    }

    /**
     * Gets purchased_price
     *
     * @return float|null
     */
    public function getPurchasedPrice()
    {
        return $this->container['purchased_price'];
    }

    /**
     * Sets purchased_price
     *
     * @param float|null $purchased_price Ціна закупівлі товару за одиницю
     *
     * @return self
     */
    public function setPurchasedPrice($purchased_price)
    {
        if (is_null($purchased_price)) {
            throw new \InvalidArgumentException('non-nullable purchased_price cannot be null');
        }
        $this->container['purchased_price'] = $purchased_price;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return float|null
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param float|null $discount_percent Знижка на товар у %
     *
     * @return self
     */
    public function setDiscountPercent($discount_percent)
    {
        if (is_null($discount_percent)) {
            array_push($this->openAPINullablesSetToNull, 'discount_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return float|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param float|null $discount_amount Знижка на товар фіксована
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            array_push($this->openAPINullablesSetToNull, 'discount_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return float|null
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param float|null $total_discount Сумарна знижка на товар
     *
     * @return self
     */
    public function setTotalDiscount($total_discount)
    {
        if (is_null($total_discount)) {
            array_push($this->openAPINullablesSetToNull, 'total_discount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_discount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity Кількість замовлених одиниць товару
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type Одиниці виміру товару. Якщо використовуються системні `шт`, то значення буде `null`
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            array_push($this->openAPINullablesSetToNull, 'unit_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets upsale
     *
     * @return bool|null
     */
    public function getUpsale()
    {
        return $this->container['upsale'];
    }

    /**
     * Sets upsale
     *
     * @param bool|null $upsale Допродаж (так/ні)
     *
     * @return self
     */
    public function setUpsale($upsale)
    {
        if (is_null($upsale)) {
            throw new \InvalidArgumentException('non-nullable upsale cannot be null');
        }
        $this->container['upsale'] = $upsale;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Коментар до товару
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets product_status_id
     *
     * @return int|null
     */
    public function getProductStatusId()
    {
        return $this->container['product_status_id'];
    }

    /**
     * Sets product_status_id
     *
     * @param int|null $product_status_id ID статусу товару в замовленні
     *
     * @return self
     */
    public function setProductStatusId($product_status_id)
    {
        if (is_null($product_status_id)) {
            throw new \InvalidArgumentException('non-nullable product_status_id cannot be null');
        }
        $this->container['product_status_id'] = $product_status_id;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string|null $picture Посилання на зображеня товару
     *
     * @return self
     */
    public function setPicture($picture)
    {
        if (is_null($picture)) {
            array_push($this->openAPINullablesSetToNull, 'picture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('picture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \OpenAPI\Client\Model\CreateNewOrderRequestProductsInnerPropertiesInner[]|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \OpenAPI\Client\Model\CreateNewOrderRequestProductsInnerPropertiesInner[]|null $properties Атрибути товару. <br/> Важливо: Кожен атрибут мае включати в себе поля `name` і `value`. <br/> Атрибут без цих ключів буде ігноруватися
     *
     * @return self
     */
    public function setProperties($properties)
    {
        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return string|null
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param string|null $shipment_type Тип відвантаження товару. Можливі значення: `warehouse` (склад) або `manufacturing` (виробництво)
     *
     * @return self
     */
    public function setShipmentType($shipment_type)
    {
        if (is_null($shipment_type)) {
            throw new \InvalidArgumentException('non-nullable shipment_type cannot be null');
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return \OpenAPI\Client\Model\OrderWithIncludesProductsInnerWarehouse|null
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param \OpenAPI\Client\Model\OrderWithIncludesProductsInnerWarehouse|null $warehouse warehouse
     *
     * @return self
     */
    public function setWarehouse($warehouse)
    {
        if (is_null($warehouse)) {
            throw new \InvalidArgumentException('non-nullable warehouse cannot be null');
        }
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return \OpenAPI\Client\Model\OrderWithIncludesProductsInnerOffer|null
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param \OpenAPI\Client\Model\OrderWithIncludesProductsInnerOffer|null $offer offer
     *
     * @return self
     */
    public function setOffer($offer)
    {
        if (is_null($offer)) {
            throw new \InvalidArgumentException('non-nullable offer cannot be null');
        }
        $this->container['offer'] = $offer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


