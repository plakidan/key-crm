<?php
/**
 * ProductsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KeyCRM OpenAPI documentation
 *
 * Опис REST маршрутів для роботи з KeyCRM OpenAPI.<br><br> <b>Зверніть увагу:</b> <br> 1. Для авторизації потрібно передавати заголовок у форматі Bearer + <a href=\"https://help.keycrm.app/uk/process-automation-api-and-more/where-to-get-an-api-key\" target=\"_blank\">APIkey</a> (authorization:[Bearer `ваш-API-ключ`]); <br> 2. Є обмеження до 60 запитів на хвилину з однієї IP-адреси по API-ключу; <br> 3. Час у всіх сутностях використовується UTC (GMT+0) - при зчитуванні (GET-запити), при виборі (фільтрації) по часу створення сутності, а також при створенні сутностей (POST).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNewCategory' => [
            'application/json',
        ],
        'createNewProduct' => [
            'application/json',
        ],
        'createNewProductImport' => [
            'application/json',
        ],
        'createNewProductOffers' => [
            'application/json',
        ],
        'getPaginatedListOfCategories' => [
            'application/json',
        ],
        'getPaginatedListOfProducts' => [
            'application/json',
        ],
        'getProductById' => [
            'application/json',
        ],
        'updateExistingProduct' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNewCategory
     *
     * Створення нової категорії товарів
     *
     * @param  \OpenAPI\Client\Model\CreateNewCategoryRequest $create_new_category_request Приклад об&#39;єкту запиту для створення нової категорії товарів (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCategory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Category
     */
    public function createNewCategory($create_new_category_request, $accept = null, string $contentType = self::contentTypes['createNewCategory'][0])
    {
        list($response) = $this->createNewCategoryWithHttpInfo($create_new_category_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation createNewCategoryWithHttpInfo
     *
     * Створення нової категорії товарів
     *
     * @param  \OpenAPI\Client\Model\CreateNewCategoryRequest $create_new_category_request Приклад об&#39;єкту запиту для створення нової категорії товарів (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCategory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Category, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewCategoryWithHttpInfo($create_new_category_request, $accept = null, string $contentType = self::contentTypes['createNewCategory'][0])
    {
        $request = $this->createNewCategoryRequest($create_new_category_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Category' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Category' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Category', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Category';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Category',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewCategoryAsync
     *
     * Створення нової категорії товарів
     *
     * @param  \OpenAPI\Client\Model\CreateNewCategoryRequest $create_new_category_request Приклад об&#39;єкту запиту для створення нової категорії товарів (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewCategoryAsync($create_new_category_request, $accept = null, string $contentType = self::contentTypes['createNewCategory'][0])
    {
        return $this->createNewCategoryAsyncWithHttpInfo($create_new_category_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewCategoryAsyncWithHttpInfo
     *
     * Створення нової категорії товарів
     *
     * @param  \OpenAPI\Client\Model\CreateNewCategoryRequest $create_new_category_request Приклад об&#39;єкту запиту для створення нової категорії товарів (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewCategoryAsyncWithHttpInfo($create_new_category_request, $accept = null, string $contentType = self::contentTypes['createNewCategory'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Category';
        $request = $this->createNewCategoryRequest($create_new_category_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewCategory'
     *
     * @param  \OpenAPI\Client\Model\CreateNewCategoryRequest $create_new_category_request Приклад об&#39;єкту запиту для створення нової категорії товарів (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewCategoryRequest($create_new_category_request, $accept = null, string $contentType = self::contentTypes['createNewCategory'][0])
    {

        // verify the required parameter 'create_new_category_request' is set
        if ($create_new_category_request === null || (is_array($create_new_category_request) && count($create_new_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_category_request when calling createNewCategory'
            );
        }



        $resourcePath = '/products/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_category_request));
            } else {
                $httpBody = $create_new_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewProduct
     *
     * Створення нового товару
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductRequest $create_new_product_request Приклад об&#39;єкту запиту для створення нового товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProduct'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Product
     */
    public function createNewProduct($create_new_product_request, $accept = null, string $contentType = self::contentTypes['createNewProduct'][0])
    {
        list($response) = $this->createNewProductWithHttpInfo($create_new_product_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation createNewProductWithHttpInfo
     *
     * Створення нового товару
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductRequest $create_new_product_request Приклад об&#39;єкту запиту для створення нового товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProduct'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewProductWithHttpInfo($create_new_product_request, $accept = null, string $contentType = self::contentTypes['createNewProduct'][0])
    {
        $request = $this->createNewProductRequest($create_new_product_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Product' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Product' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Product', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Product';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Product',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewProductAsync
     *
     * Створення нового товару
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductRequest $create_new_product_request Приклад об&#39;єкту запиту для створення нового товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewProductAsync($create_new_product_request, $accept = null, string $contentType = self::contentTypes['createNewProduct'][0])
    {
        return $this->createNewProductAsyncWithHttpInfo($create_new_product_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewProductAsyncWithHttpInfo
     *
     * Створення нового товару
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductRequest $create_new_product_request Приклад об&#39;єкту запиту для створення нового товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewProductAsyncWithHttpInfo($create_new_product_request, $accept = null, string $contentType = self::contentTypes['createNewProduct'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Product';
        $request = $this->createNewProductRequest($create_new_product_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewProduct'
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductRequest $create_new_product_request Приклад об&#39;єкту запиту для створення нового товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewProductRequest($create_new_product_request, $accept = null, string $contentType = self::contentTypes['createNewProduct'][0])
    {

        // verify the required parameter 'create_new_product_request' is set
        if ($create_new_product_request === null || (is_array($create_new_product_request) && count($create_new_product_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_product_request when calling createNewProduct'
            );
        }



        $resourcePath = '/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_product_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_product_request));
            } else {
                $httpBody = $create_new_product_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewProductImport
     *
     * Створення нових товарів списком
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductImportRequest $create_new_product_import_request Приклад запиту для створення нових товарів списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductImport'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachTagToOrder202Response
     */
    public function createNewProductImport($create_new_product_import_request, $accept = null, string $contentType = self::contentTypes['createNewProductImport'][0])
    {
        list($response) = $this->createNewProductImportWithHttpInfo($create_new_product_import_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation createNewProductImportWithHttpInfo
     *
     * Створення нових товарів списком
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductImportRequest $create_new_product_import_request Приклад запиту для створення нових товарів списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductImport'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachTagToOrder202Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewProductImportWithHttpInfo($create_new_product_import_request, $accept = null, string $contentType = self::contentTypes['createNewProductImport'][0])
    {
        $request = $this->createNewProductImportRequest($create_new_product_import_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachTagToOrder202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachTagToOrder202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewProductImportAsync
     *
     * Створення нових товарів списком
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductImportRequest $create_new_product_import_request Приклад запиту для створення нових товарів списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewProductImportAsync($create_new_product_import_request, $accept = null, string $contentType = self::contentTypes['createNewProductImport'][0])
    {
        return $this->createNewProductImportAsyncWithHttpInfo($create_new_product_import_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewProductImportAsyncWithHttpInfo
     *
     * Створення нових товарів списком
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductImportRequest $create_new_product_import_request Приклад запиту для створення нових товарів списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewProductImportAsyncWithHttpInfo($create_new_product_import_request, $accept = null, string $contentType = self::contentTypes['createNewProductImport'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
        $request = $this->createNewProductImportRequest($create_new_product_import_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewProductImport'
     *
     * @param  \OpenAPI\Client\Model\CreateNewProductImportRequest $create_new_product_import_request Приклад запиту для створення нових товарів списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewProductImportRequest($create_new_product_import_request, $accept = null, string $contentType = self::contentTypes['createNewProductImport'][0])
    {

        // verify the required parameter 'create_new_product_import_request' is set
        if ($create_new_product_import_request === null || (is_array($create_new_product_import_request) && count($create_new_product_import_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_product_import_request when calling createNewProductImport'
            );
        }



        $resourcePath = '/products/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_product_import_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_product_import_request));
            } else {
                $httpBody = $create_new_product_import_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewProductOffers
     *
     * Створення нових варіантів товару
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\CreateNewProductOffersRequest $create_new_product_offers_request Приклад об&#39;єкту запиту для створення новых варіантів товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductOffers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachTagToOrder202Response
     */
    public function createNewProductOffers($product_id, $create_new_product_offers_request, $accept = null, string $contentType = self::contentTypes['createNewProductOffers'][0])
    {
        list($response) = $this->createNewProductOffersWithHttpInfo($product_id, $create_new_product_offers_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation createNewProductOffersWithHttpInfo
     *
     * Створення нових варіантів товару
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\CreateNewProductOffersRequest $create_new_product_offers_request Приклад об&#39;єкту запиту для створення новых варіантів товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductOffers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachTagToOrder202Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewProductOffersWithHttpInfo($product_id, $create_new_product_offers_request, $accept = null, string $contentType = self::contentTypes['createNewProductOffers'][0])
    {
        $request = $this->createNewProductOffersRequest($product_id, $create_new_product_offers_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachTagToOrder202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachTagToOrder202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewProductOffersAsync
     *
     * Створення нових варіантів товару
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\CreateNewProductOffersRequest $create_new_product_offers_request Приклад об&#39;єкту запиту для створення новых варіантів товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewProductOffersAsync($product_id, $create_new_product_offers_request, $accept = null, string $contentType = self::contentTypes['createNewProductOffers'][0])
    {
        return $this->createNewProductOffersAsyncWithHttpInfo($product_id, $create_new_product_offers_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewProductOffersAsyncWithHttpInfo
     *
     * Створення нових варіантів товару
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\CreateNewProductOffersRequest $create_new_product_offers_request Приклад об&#39;єкту запиту для створення новых варіантів товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewProductOffersAsyncWithHttpInfo($product_id, $create_new_product_offers_request, $accept = null, string $contentType = self::contentTypes['createNewProductOffers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
        $request = $this->createNewProductOffersRequest($product_id, $create_new_product_offers_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewProductOffers'
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\CreateNewProductOffersRequest $create_new_product_offers_request Приклад об&#39;єкту запиту для створення новых варіантів товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewProductOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewProductOffersRequest($product_id, $create_new_product_offers_request, $accept = null, string $contentType = self::contentTypes['createNewProductOffers'][0])
    {

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling createNewProductOffers'
            );
        }

        // verify the required parameter 'create_new_product_offers_request' is set
        if ($create_new_product_offers_request === null || (is_array($create_new_product_offers_request) && count($create_new_product_offers_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_product_offers_request when calling createNewProductOffers'
            );
        }



        $resourcePath = '/products/{productId}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_product_offers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_product_offers_request));
            } else {
                $httpBody = $create_new_product_offers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfCategories
     *
     * Отримання списку категорій товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  object $filter Фільтрація списку категорій товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfCategories200Response
     */
    public function getPaginatedListOfCategories($accept = null, $limit = 15, $page = 1, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfCategories'][0])
    {
        list($response) = $this->getPaginatedListOfCategoriesWithHttpInfo($accept, $limit, $page, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfCategoriesWithHttpInfo
     *
     * Отримання списку категорій товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  object $filter Фільтрація списку категорій товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfCategories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfCategories200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfCategoriesWithHttpInfo($accept = null, $limit = 15, $page = 1, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfCategories'][0])
    {
        $request = $this->getPaginatedListOfCategoriesRequest($accept, $limit, $page, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfCategories200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfCategories200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfCategories200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfCategories200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfCategories200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfCategoriesAsync
     *
     * Отримання списку категорій товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  object $filter Фільтрація списку категорій товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfCategoriesAsync($accept = null, $limit = 15, $page = 1, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfCategories'][0])
    {
        return $this->getPaginatedListOfCategoriesAsyncWithHttpInfo($accept, $limit, $page, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfCategoriesAsyncWithHttpInfo
     *
     * Отримання списку категорій товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  object $filter Фільтрація списку категорій товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfCategoriesAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfCategories'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfCategories200Response';
        $request = $this->getPaginatedListOfCategoriesRequest($accept, $limit, $page, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfCategories'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  object $filter Фільтрація списку категорій товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfCategoriesRequest($accept = null, $limit = 15, $page = 1, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfCategories'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductsApi.getPaginatedListOfCategories, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductsApi.getPaginatedListOfCategories, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/products/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfProducts
     *
     * Отримання списку товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProducts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfProducts200Response
     */
    public function getPaginatedListOfProducts($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfProducts'][0])
    {
        list($response) = $this->getPaginatedListOfProductsWithHttpInfo($accept, $limit, $page, $include, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfProductsWithHttpInfo
     *
     * Отримання списку товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProducts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfProducts200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfProductsWithHttpInfo($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfProducts'][0])
    {
        $request = $this->getPaginatedListOfProductsRequest($accept, $limit, $page, $include, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfProducts200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfProducts200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfProducts200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfProducts200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfProducts200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfProductsAsync
     *
     * Отримання списку товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfProductsAsync($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfProducts'][0])
    {
        return $this->getPaginatedListOfProductsAsyncWithHttpInfo($accept, $limit, $page, $include, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfProductsAsyncWithHttpInfo
     *
     * Отримання списку товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfProductsAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfProducts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfProducts200Response';
        $request = $this->getPaginatedListOfProductsRequest($accept, $limit, $page, $include, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfProducts'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProducts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfProductsRequest($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfProducts'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductsApi.getPaginatedListOfProducts, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ProductsApi.getPaginatedListOfProducts, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductById
     *
     * Отримання сутності товару за ідентифікатором
     *
     * @param  string $product_id Ідентифікатор продукту (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductWithIncludes
     */
    public function getProductById($product_id, $accept = null, $include = null, string $contentType = self::contentTypes['getProductById'][0])
    {
        list($response) = $this->getProductByIdWithHttpInfo($product_id, $accept, $include, $contentType);
        return $response;
    }

    /**
     * Operation getProductByIdWithHttpInfo
     *
     * Отримання сутності товару за ідентифікатором
     *
     * @param  string $product_id Ідентифікатор продукту (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductWithIncludes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductByIdWithHttpInfo($product_id, $accept = null, $include = null, string $contentType = self::contentTypes['getProductById'][0])
    {
        $request = $this->getProductByIdRequest($product_id, $accept, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductWithIncludes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductWithIncludes' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductWithIncludes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ProductWithIncludes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductWithIncludes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductByIdAsync
     *
     * Отримання сутності товару за ідентифікатором
     *
     * @param  string $product_id Ідентифікатор продукту (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductByIdAsync($product_id, $accept = null, $include = null, string $contentType = self::contentTypes['getProductById'][0])
    {
        return $this->getProductByIdAsyncWithHttpInfo($product_id, $accept, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductByIdAsyncWithHttpInfo
     *
     * Отримання сутності товару за ідентифікатором
     *
     * @param  string $product_id Ідентифікатор продукту (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductByIdAsyncWithHttpInfo($product_id, $accept = null, $include = null, string $contentType = self::contentTypes['getProductById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductWithIncludes';
        $request = $this->getProductByIdRequest($product_id, $accept, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductById'
     *
     * @param  string $product_id Ідентифікатор продукту (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;custom_fields&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductByIdRequest($product_id, $accept = null, $include = null, string $contentType = self::contentTypes['getProductById'][0])
    {

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling getProductById'
            );
        }




        $resourcePath = '/products/{productId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExistingProduct
     *
     * Оновлення існуючого товару
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingProductRequest $update_existing_product_request Приклад об&#39;єкту запиту для оновлення існуючого товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingProduct'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Product
     */
    public function updateExistingProduct($product_id, $update_existing_product_request, $accept = null, string $contentType = self::contentTypes['updateExistingProduct'][0])
    {
        list($response) = $this->updateExistingProductWithHttpInfo($product_id, $update_existing_product_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation updateExistingProductWithHttpInfo
     *
     * Оновлення існуючого товару
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingProductRequest $update_existing_product_request Приклад об&#39;єкту запиту для оновлення існуючого товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingProduct'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExistingProductWithHttpInfo($product_id, $update_existing_product_request, $accept = null, string $contentType = self::contentTypes['updateExistingProduct'][0])
    {
        $request = $this->updateExistingProductRequest($product_id, $update_existing_product_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\Product' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Product' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Product', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Product';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Product',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExistingProductAsync
     *
     * Оновлення існуючого товару
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingProductRequest $update_existing_product_request Приклад об&#39;єкту запиту для оновлення існуючого товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingProductAsync($product_id, $update_existing_product_request, $accept = null, string $contentType = self::contentTypes['updateExistingProduct'][0])
    {
        return $this->updateExistingProductAsyncWithHttpInfo($product_id, $update_existing_product_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExistingProductAsyncWithHttpInfo
     *
     * Оновлення існуючого товару
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingProductRequest $update_existing_product_request Приклад об&#39;єкту запиту для оновлення існуючого товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingProductAsyncWithHttpInfo($product_id, $update_existing_product_request, $accept = null, string $contentType = self::contentTypes['updateExistingProduct'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Product';
        $request = $this->updateExistingProductRequest($product_id, $update_existing_product_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExistingProduct'
     *
     * @param  string $product_id Ідентифікатор товару (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingProductRequest $update_existing_product_request Приклад об&#39;єкту запиту для оновлення існуючого товару (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateExistingProductRequest($product_id, $update_existing_product_request, $accept = null, string $contentType = self::contentTypes['updateExistingProduct'][0])
    {

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling updateExistingProduct'
            );
        }

        // verify the required parameter 'update_existing_product_request' is set
        if ($update_existing_product_request === null || (is_array($update_existing_product_request) && count($update_existing_product_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_existing_product_request when calling updateExistingProduct'
            );
        }



        $resourcePath = '/products/{productId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_existing_product_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_existing_product_request));
            } else {
                $httpBody = $update_existing_product_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
