<?php
/**
 * OrderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KeyCRM OpenAPI documentation
 *
 * Опис REST маршрутів для роботи з KeyCRM OpenAPI.<br><br> <b>Зверніть увагу:</b> <br> 1. Для авторизації потрібно передавати заголовок у форматі Bearer + <a href=\"https://help.keycrm.app/uk/process-automation-api-and-more/where-to-get-an-api-key\" target=\"_blank\">APIkey</a> (authorization:[Bearer `ваш-API-ключ`]); <br> 2. Є обмеження до 60 запитів на хвилину з однієї IP-адреси по API-ключу; <br> 3. Час у всіх сутностях використовується UTC (GMT+0) - при зчитуванні (GET-запити), при виборі (фільтрації) по часу створення сутності, а також при створенні сутностей (POST).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'attachFileToOrder' => [
            'application/json',
        ],
        'attachTagToOrder' => [
            'application/json',
        ],
        'createNewOrder' => [
            'application/json',
        ],
        'createNewOrderExpense' => [
            'application/json',
        ],
        'createNewOrderImport' => [
            'application/json',
        ],
        'createNewOrderPayment' => [
            'application/json',
        ],
        'deleteFileFromOrder' => [
            'application/json',
        ],
        'deleteTagFromOrder' => [
            'application/json',
        ],
        'getOrderById' => [
            'application/json',
        ],
        'getPaginatedListOfDeliveryServices' => [
            'application/json',
        ],
        'getPaginatedListOfExpenseTypes' => [
            'application/json',
        ],
        'getPaginatedListOfOrders' => [
            'application/json',
        ],
        'getPaginatedListOfPaymentMethods' => [
            'application/json',
        ],
        'getPaginatedListOfProductStatuses' => [
            'application/json',
        ],
        'getPaginatedListOfSources' => [
            'application/json',
        ],
        'getPaginatedListOfStatuses' => [
            'application/json',
        ],
        'getPaginatedListOfTags' => [
            'application/json',
        ],
        'updateExistingOrder' => [
            'application/json',
        ],
        'updateExistingOrderExpense' => [
            'application/json',
        ],
        'updateExistingOrderPayment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation attachFileToOrder
     *
     * Додавання файлу для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachTagToOrder202Response
     */
    public function attachFileToOrder($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToOrder'][0])
    {
        list($response) = $this->attachFileToOrderWithHttpInfo($order_id, $file_id, $accept, $contentType);
        return $response;
    }

    /**
     * Operation attachFileToOrderWithHttpInfo
     *
     * Додавання файлу для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachTagToOrder202Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function attachFileToOrderWithHttpInfo($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToOrder'][0])
    {
        $request = $this->attachFileToOrderRequest($order_id, $file_id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachTagToOrder202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachTagToOrder202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attachFileToOrderAsync
     *
     * Додавання файлу для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachFileToOrderAsync($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToOrder'][0])
    {
        return $this->attachFileToOrderAsyncWithHttpInfo($order_id, $file_id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachFileToOrderAsyncWithHttpInfo
     *
     * Додавання файлу для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachFileToOrderAsyncWithHttpInfo($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToOrder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
        $request = $this->attachFileToOrderRequest($order_id, $file_id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachFileToOrder'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachFileToOrderRequest($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToOrder'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling attachFileToOrder'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling attachFileToOrder'
            );
        }



        $resourcePath = '/order/{orderId}/attachment/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attachTagToOrder
     *
     * Додавання тегу для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTagToOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachTagToOrder202Response
     */
    public function attachTagToOrder($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['attachTagToOrder'][0])
    {
        list($response) = $this->attachTagToOrderWithHttpInfo($order_id, $tag_id, $accept, $contentType);
        return $response;
    }

    /**
     * Operation attachTagToOrderWithHttpInfo
     *
     * Додавання тегу для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTagToOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachTagToOrder202Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function attachTagToOrderWithHttpInfo($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['attachTagToOrder'][0])
    {
        $request = $this->attachTagToOrderRequest($order_id, $tag_id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachTagToOrder202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachTagToOrder202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attachTagToOrderAsync
     *
     * Додавання тегу для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTagToOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachTagToOrderAsync($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['attachTagToOrder'][0])
    {
        return $this->attachTagToOrderAsyncWithHttpInfo($order_id, $tag_id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachTagToOrderAsyncWithHttpInfo
     *
     * Додавання тегу для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTagToOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachTagToOrderAsyncWithHttpInfo($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['attachTagToOrder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
        $request = $this->attachTagToOrderRequest($order_id, $tag_id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachTagToOrder'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTagToOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachTagToOrderRequest($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['attachTagToOrder'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling attachTagToOrder'
            );
        }

        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling attachTagToOrder'
            );
        }



        $resourcePath = '/order/{orderId}/tag/{tagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewOrder
     *
     * Створення нового замовлення
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderRequest $create_new_order_request Приклад об&#39;єкту запиту для створення нового замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Order
     */
    public function createNewOrder($create_new_order_request, $accept = null, string $contentType = self::contentTypes['createNewOrder'][0])
    {
        list($response) = $this->createNewOrderWithHttpInfo($create_new_order_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation createNewOrderWithHttpInfo
     *
     * Створення нового замовлення
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderRequest $create_new_order_request Приклад об&#39;єкту запиту для створення нового замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewOrderWithHttpInfo($create_new_order_request, $accept = null, string $contentType = self::contentTypes['createNewOrder'][0])
    {
        $request = $this->createNewOrderRequest($create_new_order_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewOrderAsync
     *
     * Створення нового замовлення
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderRequest $create_new_order_request Приклад об&#39;єкту запиту для створення нового замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewOrderAsync($create_new_order_request, $accept = null, string $contentType = self::contentTypes['createNewOrder'][0])
    {
        return $this->createNewOrderAsyncWithHttpInfo($create_new_order_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewOrderAsyncWithHttpInfo
     *
     * Створення нового замовлення
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderRequest $create_new_order_request Приклад об&#39;єкту запиту для створення нового замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewOrderAsyncWithHttpInfo($create_new_order_request, $accept = null, string $contentType = self::contentTypes['createNewOrder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Order';
        $request = $this->createNewOrderRequest($create_new_order_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewOrder'
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderRequest $create_new_order_request Приклад об&#39;єкту запиту для створення нового замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewOrderRequest($create_new_order_request, $accept = null, string $contentType = self::contentTypes['createNewOrder'][0])
    {

        // verify the required parameter 'create_new_order_request' is set
        if ($create_new_order_request === null || (is_array($create_new_order_request) && count($create_new_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_order_request when calling createNewOrder'
            );
        }



        $resourcePath = '/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_order_request));
            } else {
                $httpBody = $create_new_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewOrderExpense
     *
     * Додавання нової витрати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderExpenseRequest $create_new_order_expense_request Приклад об&#39;єкту запиту для створення нової витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderExpense'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Expense
     */
    public function createNewOrderExpense($order_id, $create_new_order_expense_request, $accept = null, string $contentType = self::contentTypes['createNewOrderExpense'][0])
    {
        list($response) = $this->createNewOrderExpenseWithHttpInfo($order_id, $create_new_order_expense_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation createNewOrderExpenseWithHttpInfo
     *
     * Додавання нової витрати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderExpenseRequest $create_new_order_expense_request Приклад об&#39;єкту запиту для створення нової витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderExpense'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Expense, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewOrderExpenseWithHttpInfo($order_id, $create_new_order_expense_request, $accept = null, string $contentType = self::contentTypes['createNewOrderExpense'][0])
    {
        $request = $this->createNewOrderExpenseRequest($order_id, $create_new_order_expense_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Expense' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Expense' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Expense', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Expense';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Expense',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewOrderExpenseAsync
     *
     * Додавання нової витрати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderExpenseRequest $create_new_order_expense_request Приклад об&#39;єкту запиту для створення нової витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderExpense'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewOrderExpenseAsync($order_id, $create_new_order_expense_request, $accept = null, string $contentType = self::contentTypes['createNewOrderExpense'][0])
    {
        return $this->createNewOrderExpenseAsyncWithHttpInfo($order_id, $create_new_order_expense_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewOrderExpenseAsyncWithHttpInfo
     *
     * Додавання нової витрати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderExpenseRequest $create_new_order_expense_request Приклад об&#39;єкту запиту для створення нової витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderExpense'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewOrderExpenseAsyncWithHttpInfo($order_id, $create_new_order_expense_request, $accept = null, string $contentType = self::contentTypes['createNewOrderExpense'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Expense';
        $request = $this->createNewOrderExpenseRequest($order_id, $create_new_order_expense_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewOrderExpense'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderExpenseRequest $create_new_order_expense_request Приклад об&#39;єкту запиту для створення нової витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderExpense'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewOrderExpenseRequest($order_id, $create_new_order_expense_request, $accept = null, string $contentType = self::contentTypes['createNewOrderExpense'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling createNewOrderExpense'
            );
        }

        // verify the required parameter 'create_new_order_expense_request' is set
        if ($create_new_order_expense_request === null || (is_array($create_new_order_expense_request) && count($create_new_order_expense_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_order_expense_request when calling createNewOrderExpense'
            );
        }



        $resourcePath = '/order/{orderId}/expense';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_order_expense_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_order_expense_request));
            } else {
                $httpBody = $create_new_order_expense_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewOrderImport
     *
     * Створення нових замовлень списком
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderImportRequest $create_new_order_import_request Приклад запиту для створення нових заломлень списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderImport'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createNewOrderImport($create_new_order_import_request, $accept = null, string $contentType = self::contentTypes['createNewOrderImport'][0])
    {
        $this->createNewOrderImportWithHttpInfo($create_new_order_import_request, $accept, $contentType);
    }

    /**
     * Operation createNewOrderImportWithHttpInfo
     *
     * Створення нових замовлень списком
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderImportRequest $create_new_order_import_request Приклад запиту для створення нових заломлень списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderImport'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewOrderImportWithHttpInfo($create_new_order_import_request, $accept = null, string $contentType = self::contentTypes['createNewOrderImport'][0])
    {
        $request = $this->createNewOrderImportRequest($create_new_order_import_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createNewOrderImportAsync
     *
     * Створення нових замовлень списком
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderImportRequest $create_new_order_import_request Приклад запиту для створення нових заломлень списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewOrderImportAsync($create_new_order_import_request, $accept = null, string $contentType = self::contentTypes['createNewOrderImport'][0])
    {
        return $this->createNewOrderImportAsyncWithHttpInfo($create_new_order_import_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewOrderImportAsyncWithHttpInfo
     *
     * Створення нових замовлень списком
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderImportRequest $create_new_order_import_request Приклад запиту для створення нових заломлень списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewOrderImportAsyncWithHttpInfo($create_new_order_import_request, $accept = null, string $contentType = self::contentTypes['createNewOrderImport'][0])
    {
        $returnType = '';
        $request = $this->createNewOrderImportRequest($create_new_order_import_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewOrderImport'
     *
     * @param  \OpenAPI\Client\Model\CreateNewOrderImportRequest $create_new_order_import_request Приклад запиту для створення нових заломлень списком. (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewOrderImportRequest($create_new_order_import_request, $accept = null, string $contentType = self::contentTypes['createNewOrderImport'][0])
    {

        // verify the required parameter 'create_new_order_import_request' is set
        if ($create_new_order_import_request === null || (is_array($create_new_order_import_request) && count($create_new_order_import_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_order_import_request when calling createNewOrderImport'
            );
        }



        $resourcePath = '/order/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_order_import_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_order_import_request));
            } else {
                $httpBody = $create_new_order_import_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewOrderPayment
     *
     * Додавання нової оплати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Payment
     */
    public function createNewOrderPayment($order_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewOrderPayment'][0])
    {
        list($response) = $this->createNewOrderPaymentWithHttpInfo($order_id, $create_new_order_payment_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation createNewOrderPaymentWithHttpInfo
     *
     * Додавання нової оплати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewOrderPaymentWithHttpInfo($order_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewOrderPayment'][0])
    {
        $request = $this->createNewOrderPaymentRequest($order_id, $create_new_order_payment_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewOrderPaymentAsync
     *
     * Додавання нової оплати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewOrderPaymentAsync($order_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewOrderPayment'][0])
    {
        return $this->createNewOrderPaymentAsyncWithHttpInfo($order_id, $create_new_order_payment_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewOrderPaymentAsyncWithHttpInfo
     *
     * Додавання нової оплати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewOrderPaymentAsyncWithHttpInfo($order_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewOrderPayment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Payment';
        $request = $this->createNewOrderPaymentRequest($order_id, $create_new_order_payment_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewOrderPayment'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewOrderPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewOrderPaymentRequest($order_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewOrderPayment'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling createNewOrderPayment'
            );
        }

        // verify the required parameter 'create_new_order_payment_request' is set
        if ($create_new_order_payment_request === null || (is_array($create_new_order_payment_request) && count($create_new_order_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_order_payment_request when calling createNewOrderPayment'
            );
        }



        $resourcePath = '/order/{orderId}/payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_order_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_order_payment_request));
            } else {
                $httpBody = $create_new_order_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFileFromOrder
     *
     * Видалення файлу із існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachTagToOrder202Response
     */
    public function deleteFileFromOrder($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromOrder'][0])
    {
        list($response) = $this->deleteFileFromOrderWithHttpInfo($order_id, $file_id, $accept, $contentType);
        return $response;
    }

    /**
     * Operation deleteFileFromOrderWithHttpInfo
     *
     * Видалення файлу із існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachTagToOrder202Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileFromOrderWithHttpInfo($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromOrder'][0])
    {
        $request = $this->deleteFileFromOrderRequest($order_id, $file_id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachTagToOrder202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachTagToOrder202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFileFromOrderAsync
     *
     * Видалення файлу із існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileFromOrderAsync($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromOrder'][0])
    {
        return $this->deleteFileFromOrderAsyncWithHttpInfo($order_id, $file_id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFileFromOrderAsyncWithHttpInfo
     *
     * Видалення файлу із існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileFromOrderAsyncWithHttpInfo($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromOrder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
        $request = $this->deleteFileFromOrderRequest($order_id, $file_id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFileFromOrder'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFileFromOrderRequest($order_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromOrder'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling deleteFileFromOrder'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteFileFromOrder'
            );
        }



        $resourcePath = '/order/{orderId}/attachment/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTagFromOrder
     *
     * Видалення тегу з існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTagFromOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTagFromOrder($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['deleteTagFromOrder'][0])
    {
        $this->deleteTagFromOrderWithHttpInfo($order_id, $tag_id, $accept, $contentType);
    }

    /**
     * Operation deleteTagFromOrderWithHttpInfo
     *
     * Видалення тегу з існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTagFromOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTagFromOrderWithHttpInfo($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['deleteTagFromOrder'][0])
    {
        $request = $this->deleteTagFromOrderRequest($order_id, $tag_id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTagFromOrderAsync
     *
     * Видалення тегу з існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTagFromOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagFromOrderAsync($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['deleteTagFromOrder'][0])
    {
        return $this->deleteTagFromOrderAsyncWithHttpInfo($order_id, $tag_id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTagFromOrderAsyncWithHttpInfo
     *
     * Видалення тегу з існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTagFromOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagFromOrderAsyncWithHttpInfo($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['deleteTagFromOrder'][0])
    {
        $returnType = '';
        $request = $this->deleteTagFromOrderRequest($order_id, $tag_id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTagFromOrder'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $tag_id Ідентифікатор тегу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTagFromOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTagFromOrderRequest($order_id, $tag_id, $accept = null, string $contentType = self::contentTypes['deleteTagFromOrder'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling deleteTagFromOrder'
            );
        }

        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling deleteTagFromOrder'
            );
        }



        $resourcePath = '/order/{orderId}/tag/{tagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderById
     *
     * Отримання сутності замовлення за ідентифікатором
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OrderWithIncludes
     */
    public function getOrderById($order_id, $accept = null, $include = null, string $contentType = self::contentTypes['getOrderById'][0])
    {
        list($response) = $this->getOrderByIdWithHttpInfo($order_id, $accept, $include, $contentType);
        return $response;
    }

    /**
     * Operation getOrderByIdWithHttpInfo
     *
     * Отримання сутності замовлення за ідентифікатором
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OrderWithIncludes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderByIdWithHttpInfo($order_id, $accept = null, $include = null, string $contentType = self::contentTypes['getOrderById'][0])
    {
        $request = $this->getOrderByIdRequest($order_id, $accept, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OrderWithIncludes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OrderWithIncludes' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OrderWithIncludes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\OrderWithIncludes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OrderWithIncludes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderByIdAsync
     *
     * Отримання сутності замовлення за ідентифікатором
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderByIdAsync($order_id, $accept = null, $include = null, string $contentType = self::contentTypes['getOrderById'][0])
    {
        return $this->getOrderByIdAsyncWithHttpInfo($order_id, $accept, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderByIdAsyncWithHttpInfo
     *
     * Отримання сутності замовлення за ідентифікатором
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderByIdAsyncWithHttpInfo($order_id, $accept = null, $include = null, string $contentType = self::contentTypes['getOrderById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OrderWithIncludes';
        $request = $this->getOrderByIdRequest($order_id, $accept, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderById'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderByIdRequest($order_id, $accept = null, $include = null, string $contentType = self::contentTypes['getOrderById'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getOrderById'
            );
        }




        $resourcePath = '/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfDeliveryServices
     *
     * Отримання списку доступних методів доставки
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfDeliveryServices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfDeliveryServices200Response
     */
    public function getPaginatedListOfDeliveryServices($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfDeliveryServices'][0])
    {
        list($response) = $this->getPaginatedListOfDeliveryServicesWithHttpInfo($accept, $limit, $page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfDeliveryServicesWithHttpInfo
     *
     * Отримання списку доступних методів доставки
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfDeliveryServices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfDeliveryServices200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfDeliveryServicesWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfDeliveryServices'][0])
    {
        $request = $this->getPaginatedListOfDeliveryServicesRequest($accept, $limit, $page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfDeliveryServices200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfDeliveryServices200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfDeliveryServices200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfDeliveryServices200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfDeliveryServices200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfDeliveryServicesAsync
     *
     * Отримання списку доступних методів доставки
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfDeliveryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfDeliveryServicesAsync($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfDeliveryServices'][0])
    {
        return $this->getPaginatedListOfDeliveryServicesAsyncWithHttpInfo($accept, $limit, $page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfDeliveryServicesAsyncWithHttpInfo
     *
     * Отримання списку доступних методів доставки
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfDeliveryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfDeliveryServicesAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfDeliveryServices'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfDeliveryServices200Response';
        $request = $this->getPaginatedListOfDeliveryServicesRequest($accept, $limit, $page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfDeliveryServices'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfDeliveryServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfDeliveryServicesRequest($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfDeliveryServices'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfDeliveryServices, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfDeliveryServices, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/order/delivery-service';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfExpenseTypes
     *
     * Отримання списку типів витрат
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку типів витрат (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfExpenseTypes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfExpenseTypes200Response
     */
    public function getPaginatedListOfExpenseTypes($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfExpenseTypes'][0])
    {
        list($response) = $this->getPaginatedListOfExpenseTypesWithHttpInfo($accept, $limit, $page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfExpenseTypesWithHttpInfo
     *
     * Отримання списку типів витрат
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку типів витрат (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfExpenseTypes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfExpenseTypes200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfExpenseTypesWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfExpenseTypes'][0])
    {
        $request = $this->getPaginatedListOfExpenseTypesRequest($accept, $limit, $page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfExpenseTypes200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfExpenseTypes200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfExpenseTypes200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfExpenseTypes200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfExpenseTypes200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfExpenseTypesAsync
     *
     * Отримання списку типів витрат
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку типів витрат (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfExpenseTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfExpenseTypesAsync($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfExpenseTypes'][0])
    {
        return $this->getPaginatedListOfExpenseTypesAsyncWithHttpInfo($accept, $limit, $page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfExpenseTypesAsyncWithHttpInfo
     *
     * Отримання списку типів витрат
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку типів витрат (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfExpenseTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfExpenseTypesAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfExpenseTypes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfExpenseTypes200Response';
        $request = $this->getPaginatedListOfExpenseTypesRequest($accept, $limit, $page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfExpenseTypes'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку типів витрат (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfExpenseTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfExpenseTypesRequest($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfExpenseTypes'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfExpenseTypes, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfExpenseTypes, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/order/expense-type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfOrders
     *
     * Отримання списку замовлень
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  object $filter Фільтрація списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfOrders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfOrders200Response
     */
    public function getPaginatedListOfOrders($accept = null, $limit = 15, $page = 1, $include = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfOrders'][0])
    {
        list($response) = $this->getPaginatedListOfOrdersWithHttpInfo($accept, $limit, $page, $include, $sort, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfOrdersWithHttpInfo
     *
     * Отримання списку замовлень
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  object $filter Фільтрація списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfOrders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfOrders200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfOrdersWithHttpInfo($accept = null, $limit = 15, $page = 1, $include = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfOrders'][0])
    {
        $request = $this->getPaginatedListOfOrdersRequest($accept, $limit, $page, $include, $sort, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfOrders200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfOrders200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfOrders200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfOrders200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfOrders200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfOrdersAsync
     *
     * Отримання списку замовлень
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  object $filter Фільтрація списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfOrdersAsync($accept = null, $limit = 15, $page = 1, $include = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfOrders'][0])
    {
        return $this->getPaginatedListOfOrdersAsyncWithHttpInfo($accept, $limit, $page, $include, $sort, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfOrdersAsyncWithHttpInfo
     *
     * Отримання списку замовлень
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  object $filter Фільтрація списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfOrdersAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $include = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfOrders'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfOrders200Response';
        $request = $this->getPaginatedListOfOrdersRequest($accept, $limit, $page, $include, $sort, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfOrders'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;buyer,status,tags&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;buyer&#x60;, &#x60;products.offer&#x60;, &#x60;manager&#x60;, &#x60;tags&#x60;, &#x60;status&#x60;, &#x60;marketing&#x60;,  &#x60;payments&#x60;, &#x60;shipping.lastHistory&#x60;, &#x60;shipping.deliveryService&#x60;, &#x60;expenses&#x60;, &#x60;custom_fields&#x60;, &#x60;assigned&#x60; (optional)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  object $filter Фільтрація списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfOrdersRequest($accept = null, $limit = 15, $page = 1, $include = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfOrders'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfOrders, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfOrders, must be bigger than or equal to 1.');
        }
        





        $resourcePath = '/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfPaymentMethods
     *
     * Отримання списку платіжних методів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPaymentMethods'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfPaymentMethods200Response
     */
    public function getPaginatedListOfPaymentMethods($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfPaymentMethods'][0])
    {
        list($response) = $this->getPaginatedListOfPaymentMethodsWithHttpInfo($accept, $limit, $page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfPaymentMethodsWithHttpInfo
     *
     * Отримання списку платіжних методів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPaymentMethods'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfPaymentMethods200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfPaymentMethodsWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfPaymentMethods'][0])
    {
        $request = $this->getPaginatedListOfPaymentMethodsRequest($accept, $limit, $page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPaymentMethods200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPaymentMethods200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPaymentMethods200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPaymentMethods200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPaymentMethods200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfPaymentMethodsAsync
     *
     * Отримання списку платіжних методів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfPaymentMethodsAsync($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfPaymentMethods'][0])
    {
        return $this->getPaginatedListOfPaymentMethodsAsyncWithHttpInfo($accept, $limit, $page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfPaymentMethodsAsyncWithHttpInfo
     *
     * Отримання списку платіжних методів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfPaymentMethodsAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfPaymentMethods'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPaymentMethods200Response';
        $request = $this->getPaginatedListOfPaymentMethodsRequest($accept, $limit, $page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfPaymentMethods'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку методів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfPaymentMethodsRequest($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfPaymentMethods'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfPaymentMethods, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfPaymentMethods, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/order/payment-method';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfProductStatuses
     *
     * Отримання списку статусів товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProductStatuses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response
     */
    public function getPaginatedListOfProductStatuses($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfProductStatuses'][0])
    {
        list($response) = $this->getPaginatedListOfProductStatusesWithHttpInfo($accept, $limit, $page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfProductStatusesWithHttpInfo
     *
     * Отримання списку статусів товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProductStatuses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfProductStatusesWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfProductStatuses'][0])
    {
        $request = $this->getPaginatedListOfProductStatusesRequest($accept, $limit, $page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfProductStatusesAsync
     *
     * Отримання списку статусів товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProductStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfProductStatusesAsync($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfProductStatuses'][0])
    {
        return $this->getPaginatedListOfProductStatusesAsyncWithHttpInfo($accept, $limit, $page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfProductStatusesAsyncWithHttpInfo
     *
     * Отримання списку статусів товарів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProductStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfProductStatusesAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfProductStatuses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response';
        $request = $this->getPaginatedListOfProductStatusesRequest($accept, $limit, $page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfProductStatuses'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів товарів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfProductStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfProductStatusesRequest($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfProductStatuses'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfProductStatuses, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfProductStatuses, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/order/product-status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfSources
     *
     * Отримання списку джерел
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfSources'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfSources200Response
     */
    public function getPaginatedListOfSources($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfSources'][0])
    {
        list($response) = $this->getPaginatedListOfSourcesWithHttpInfo($accept, $limit, $page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfSourcesWithHttpInfo
     *
     * Отримання списку джерел
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfSources'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfSources200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfSourcesWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfSources'][0])
    {
        $request = $this->getPaginatedListOfSourcesRequest($accept, $limit, $page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfSources200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfSources200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfSources200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfSources200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfSources200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfSourcesAsync
     *
     * Отримання списку джерел
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfSourcesAsync($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfSources'][0])
    {
        return $this->getPaginatedListOfSourcesAsyncWithHttpInfo($accept, $limit, $page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfSourcesAsyncWithHttpInfo
     *
     * Отримання списку джерел
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfSourcesAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfSources'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfSources200Response';
        $request = $this->getPaginatedListOfSourcesRequest($accept, $limit, $page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfSources'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfSources'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfSourcesRequest($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfSources'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfSources, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfSources, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/order/source';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfStatuses
     *
     * Отримання списку статусів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfStatuses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response
     */
    public function getPaginatedListOfStatuses($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfStatuses'][0])
    {
        list($response) = $this->getPaginatedListOfStatusesWithHttpInfo($accept, $limit, $page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfStatusesWithHttpInfo
     *
     * Отримання списку статусів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfStatuses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfStatusesWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfStatuses'][0])
    {
        $request = $this->getPaginatedListOfStatusesRequest($accept, $limit, $page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfStatusesAsync
     *
     * Отримання списку статусів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfStatusesAsync($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfStatuses'][0])
    {
        return $this->getPaginatedListOfStatusesAsyncWithHttpInfo($accept, $limit, $page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfStatusesAsyncWithHttpInfo
     *
     * Отримання списку статусів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfStatusesAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfStatuses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfStatuses200Response';
        $request = $this->getPaginatedListOfStatusesRequest($accept, $limit, $page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfStatuses'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку статусів (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfStatusesRequest($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfStatuses'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfStatuses, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfStatuses, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/order/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfTags
     *
     * Отримання списку тегів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfTags'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfTags200Response
     */
    public function getPaginatedListOfTags($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfTags'][0])
    {
        list($response) = $this->getPaginatedListOfTagsWithHttpInfo($accept, $limit, $page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfTagsWithHttpInfo
     *
     * Отримання списку тегів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfTags'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfTags200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfTagsWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfTags'][0])
    {
        $request = $this->getPaginatedListOfTagsRequest($accept, $limit, $page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfTags200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfTags200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfTags200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfTags200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfTags200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfTagsAsync
     *
     * Отримання списку тегів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfTagsAsync($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfTags'][0])
    {
        return $this->getPaginatedListOfTagsAsyncWithHttpInfo($accept, $limit, $page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfTagsAsyncWithHttpInfo
     *
     * Отримання списку тегів
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfTagsAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfTags'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfTags200Response';
        $request = $this->getPaginatedListOfTagsRequest($accept, $limit, $page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfTags'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $sort Сортування списку замовлень (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfTagsRequest($accept = null, $limit = 15, $page = 1, $sort = null, string $contentType = self::contentTypes['getPaginatedListOfTags'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfTags, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling OrderApi.getPaginatedListOfTags, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/order/tag';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExistingOrder
     *
     * Оновлення існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderRequest $update_existing_order_request Приклад об&#39;єкту запиту для оновлення існуючого замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Order
     */
    public function updateExistingOrder($order_id, $update_existing_order_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrder'][0])
    {
        list($response) = $this->updateExistingOrderWithHttpInfo($order_id, $update_existing_order_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation updateExistingOrderWithHttpInfo
     *
     * Оновлення існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderRequest $update_existing_order_request Приклад об&#39;єкту запиту для оновлення існуючого замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExistingOrderWithHttpInfo($order_id, $update_existing_order_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrder'][0])
    {
        $request = $this->updateExistingOrderRequest($order_id, $update_existing_order_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Order' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExistingOrderAsync
     *
     * Оновлення існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderRequest $update_existing_order_request Приклад об&#39;єкту запиту для оновлення існуючого замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingOrderAsync($order_id, $update_existing_order_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrder'][0])
    {
        return $this->updateExistingOrderAsyncWithHttpInfo($order_id, $update_existing_order_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExistingOrderAsyncWithHttpInfo
     *
     * Оновлення існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderRequest $update_existing_order_request Приклад об&#39;єкту запиту для оновлення існуючого замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingOrderAsyncWithHttpInfo($order_id, $update_existing_order_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Order';
        $request = $this->updateExistingOrderRequest($order_id, $update_existing_order_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExistingOrder'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderRequest $update_existing_order_request Приклад об&#39;єкту запиту для оновлення існуючого замовлення (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateExistingOrderRequest($order_id, $update_existing_order_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrder'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling updateExistingOrder'
            );
        }

        // verify the required parameter 'update_existing_order_request' is set
        if ($update_existing_order_request === null || (is_array($update_existing_order_request) && count($update_existing_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_existing_order_request when calling updateExistingOrder'
            );
        }



        $resourcePath = '/order/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_existing_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_existing_order_request));
            } else {
                $httpBody = $update_existing_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExistingOrderExpense
     *
     * Оновлення витрати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $expense_id Ідентифікатор витрати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderExpenseRequest $update_existing_order_expense_request Приклад об&#39;єкту запиту для оновлення витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderExpense'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Expense
     */
    public function updateExistingOrderExpense($order_id, $expense_id, $update_existing_order_expense_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderExpense'][0])
    {
        list($response) = $this->updateExistingOrderExpenseWithHttpInfo($order_id, $expense_id, $update_existing_order_expense_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation updateExistingOrderExpenseWithHttpInfo
     *
     * Оновлення витрати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $expense_id Ідентифікатор витрати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderExpenseRequest $update_existing_order_expense_request Приклад об&#39;єкту запиту для оновлення витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderExpense'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Expense, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExistingOrderExpenseWithHttpInfo($order_id, $expense_id, $update_existing_order_expense_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderExpense'][0])
    {
        $request = $this->updateExistingOrderExpenseRequest($order_id, $expense_id, $update_existing_order_expense_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\Expense' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Expense' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Expense', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Expense';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Expense',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExistingOrderExpenseAsync
     *
     * Оновлення витрати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $expense_id Ідентифікатор витрати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderExpenseRequest $update_existing_order_expense_request Приклад об&#39;єкту запиту для оновлення витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderExpense'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingOrderExpenseAsync($order_id, $expense_id, $update_existing_order_expense_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderExpense'][0])
    {
        return $this->updateExistingOrderExpenseAsyncWithHttpInfo($order_id, $expense_id, $update_existing_order_expense_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExistingOrderExpenseAsyncWithHttpInfo
     *
     * Оновлення витрати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $expense_id Ідентифікатор витрати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderExpenseRequest $update_existing_order_expense_request Приклад об&#39;єкту запиту для оновлення витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderExpense'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingOrderExpenseAsyncWithHttpInfo($order_id, $expense_id, $update_existing_order_expense_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderExpense'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Expense';
        $request = $this->updateExistingOrderExpenseRequest($order_id, $expense_id, $update_existing_order_expense_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExistingOrderExpense'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $expense_id Ідентифікатор витрати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderExpenseRequest $update_existing_order_expense_request Приклад об&#39;єкту запиту для оновлення витрати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderExpense'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateExistingOrderExpenseRequest($order_id, $expense_id, $update_existing_order_expense_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderExpense'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling updateExistingOrderExpense'
            );
        }

        // verify the required parameter 'expense_id' is set
        if ($expense_id === null || (is_array($expense_id) && count($expense_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expense_id when calling updateExistingOrderExpense'
            );
        }

        // verify the required parameter 'update_existing_order_expense_request' is set
        if ($update_existing_order_expense_request === null || (is_array($update_existing_order_expense_request) && count($update_existing_order_expense_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_existing_order_expense_request when calling updateExistingOrderExpense'
            );
        }



        $resourcePath = '/order/{orderId}/expense/{expenseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($expense_id !== null) {
            $resourcePath = str_replace(
                '{' . 'expenseId' . '}',
                ObjectSerializer::toPathValue($expense_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_existing_order_expense_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_existing_order_expense_request));
            } else {
                $httpBody = $update_existing_order_expense_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExistingOrderPayment
     *
     * Оновлення оплати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Payment
     */
    public function updateExistingOrderPayment($order_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderPayment'][0])
    {
        list($response) = $this->updateExistingOrderPaymentWithHttpInfo($order_id, $payment_id, $update_existing_order_payment_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation updateExistingOrderPaymentWithHttpInfo
     *
     * Оновлення оплати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExistingOrderPaymentWithHttpInfo($order_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderPayment'][0])
    {
        $request = $this->updateExistingOrderPaymentRequest($order_id, $payment_id, $update_existing_order_payment_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExistingOrderPaymentAsync
     *
     * Оновлення оплати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingOrderPaymentAsync($order_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderPayment'][0])
    {
        return $this->updateExistingOrderPaymentAsyncWithHttpInfo($order_id, $payment_id, $update_existing_order_payment_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExistingOrderPaymentAsyncWithHttpInfo
     *
     * Оновлення оплати для існуючого замовлення
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingOrderPaymentAsyncWithHttpInfo($order_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderPayment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Payment';
        $request = $this->updateExistingOrderPaymentRequest($order_id, $payment_id, $update_existing_order_payment_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExistingOrderPayment'
     *
     * @param  string $order_id Ідентифікатор замовлення (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingOrderPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateExistingOrderPaymentRequest($order_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingOrderPayment'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling updateExistingOrderPayment'
            );
        }

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling updateExistingOrderPayment'
            );
        }

        // verify the required parameter 'update_existing_order_payment_request' is set
        if ($update_existing_order_payment_request === null || (is_array($update_existing_order_payment_request) && count($update_existing_order_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_existing_order_payment_request when calling updateExistingOrderPayment'
            );
        }



        $resourcePath = '/order/{orderId}/payment/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_existing_order_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_existing_order_payment_request));
            } else {
                $httpBody = $update_existing_order_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
