<?php
/**
 * PipelinesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KeyCRM OpenAPI documentation
 *
 * Опис REST маршрутів для роботи з KeyCRM OpenAPI.<br><br> <b>Зверніть увагу:</b> <br> 1. Для авторизації потрібно передавати заголовок у форматі Bearer + <a href=\"https://help.keycrm.app/uk/process-automation-api-and-more/where-to-get-an-api-key\" target=\"_blank\">APIkey</a> (authorization:[Bearer `ваш-API-ключ`]); <br> 2. Є обмеження до 60 запитів на хвилину з однієї IP-адреси по API-ключу; <br> 3. Час у всіх сутностях використовується UTC (GMT+0) - при зчитуванні (GET-запити), при виборі (фільтрації) по часу створення сутності, а також при створенні сутностей (POST).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PipelinesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PipelinesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'attachFileToPipelinesCard' => [
            'application/json',
        ],
        'createNewPipelineCard' => [
            'application/json',
        ],
        'createNewPipelinesCardPayment' => [
            'application/json',
        ],
        'deleteFileFromCard' => [
            'application/json',
        ],
        'getPaginatedListOfPipelines' => [
            'application/json',
        ],
        'getPaginatedListOfPipelinesCards' => [
            'application/json',
        ],
        'getPaginatedListOfPipelinesStatuses' => [
            'application/json',
        ],
        'getPipelinesCard' => [
            'application/json',
        ],
        'updateExistingPipelinesCardPayment' => [
            'application/json',
        ],
        'updatePipelinesCard' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation attachFileToPipelinesCard
     *
     * Додавання файлу до картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToPipelinesCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachTagToOrder202Response
     */
    public function attachFileToPipelinesCard($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToPipelinesCard'][0])
    {
        list($response) = $this->attachFileToPipelinesCardWithHttpInfo($card_id, $file_id, $accept, $contentType);
        return $response;
    }

    /**
     * Operation attachFileToPipelinesCardWithHttpInfo
     *
     * Додавання файлу до картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToPipelinesCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachTagToOrder202Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function attachFileToPipelinesCardWithHttpInfo($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToPipelinesCard'][0])
    {
        $request = $this->attachFileToPipelinesCardRequest($card_id, $file_id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachTagToOrder202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachTagToOrder202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attachFileToPipelinesCardAsync
     *
     * Додавання файлу до картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToPipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachFileToPipelinesCardAsync($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToPipelinesCard'][0])
    {
        return $this->attachFileToPipelinesCardAsyncWithHttpInfo($card_id, $file_id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachFileToPipelinesCardAsyncWithHttpInfo
     *
     * Додавання файлу до картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToPipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachFileToPipelinesCardAsyncWithHttpInfo($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToPipelinesCard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
        $request = $this->attachFileToPipelinesCardRequest($card_id, $file_id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachFileToPipelinesCard'
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachFileToPipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachFileToPipelinesCardRequest($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['attachFileToPipelinesCard'][0])
    {

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling attachFileToPipelinesCard'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling attachFileToPipelinesCard'
            );
        }



        $resourcePath = '/pipelines/cards/{cardId}/attachment/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewPipelineCard
     *
     * Створення нової картки у воронці
     *
     * @param  \OpenAPI\Client\Model\CreateNewPipelineCardRequest $create_new_pipeline_card_request Приклад об&#39;єкту запиту для створення нової картки у воронці (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelineCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PipelineCard|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response
     */
    public function createNewPipelineCard($create_new_pipeline_card_request, string $contentType = self::contentTypes['createNewPipelineCard'][0])
    {
        list($response) = $this->createNewPipelineCardWithHttpInfo($create_new_pipeline_card_request, $contentType);
        return $response;
    }

    /**
     * Operation createNewPipelineCardWithHttpInfo
     *
     * Створення нової картки у воронці
     *
     * @param  \OpenAPI\Client\Model\CreateNewPipelineCardRequest $create_new_pipeline_card_request Приклад об&#39;єкту запиту для створення нової картки у воронці (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelineCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PipelineCard|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewPipelineCardWithHttpInfo($create_new_pipeline_card_request, string $contentType = self::contentTypes['createNewPipelineCard'][0])
    {
        $request = $this->createNewPipelineCardRequest($create_new_pipeline_card_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\PipelineCard' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PipelineCard' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PipelineCard', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\PipelineCard';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PipelineCard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewPipelineCardAsync
     *
     * Створення нової картки у воронці
     *
     * @param  \OpenAPI\Client\Model\CreateNewPipelineCardRequest $create_new_pipeline_card_request Приклад об&#39;єкту запиту для створення нової картки у воронці (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelineCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewPipelineCardAsync($create_new_pipeline_card_request, string $contentType = self::contentTypes['createNewPipelineCard'][0])
    {
        return $this->createNewPipelineCardAsyncWithHttpInfo($create_new_pipeline_card_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewPipelineCardAsyncWithHttpInfo
     *
     * Створення нової картки у воронці
     *
     * @param  \OpenAPI\Client\Model\CreateNewPipelineCardRequest $create_new_pipeline_card_request Приклад об&#39;єкту запиту для створення нової картки у воронці (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelineCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewPipelineCardAsyncWithHttpInfo($create_new_pipeline_card_request, string $contentType = self::contentTypes['createNewPipelineCard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PipelineCard';
        $request = $this->createNewPipelineCardRequest($create_new_pipeline_card_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewPipelineCard'
     *
     * @param  \OpenAPI\Client\Model\CreateNewPipelineCardRequest $create_new_pipeline_card_request Приклад об&#39;єкту запиту для створення нової картки у воронці (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelineCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewPipelineCardRequest($create_new_pipeline_card_request, string $contentType = self::contentTypes['createNewPipelineCard'][0])
    {

        // verify the required parameter 'create_new_pipeline_card_request' is set
        if ($create_new_pipeline_card_request === null || (is_array($create_new_pipeline_card_request) && count($create_new_pipeline_card_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_pipeline_card_request when calling createNewPipelineCard'
            );
        }


        $resourcePath = '/pipelines/cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_pipeline_card_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_pipeline_card_request));
            } else {
                $httpBody = $create_new_pipeline_card_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewPipelinesCardPayment
     *
     * Додавання нової оплати для існуючої картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Payment|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response
     */
    public function createNewPipelinesCardPayment($card_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewPipelinesCardPayment'][0])
    {
        list($response) = $this->createNewPipelinesCardPaymentWithHttpInfo($card_id, $create_new_order_payment_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation createNewPipelinesCardPaymentWithHttpInfo
     *
     * Додавання нової оплати для існуючої картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Payment|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewPipelinesCardPaymentWithHttpInfo($card_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewPipelinesCardPayment'][0])
    {
        $request = $this->createNewPipelinesCardPaymentRequest($card_id, $create_new_order_payment_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewPipelinesCardPaymentAsync
     *
     * Додавання нової оплати для існуючої картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewPipelinesCardPaymentAsync($card_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewPipelinesCardPayment'][0])
    {
        return $this->createNewPipelinesCardPaymentAsyncWithHttpInfo($card_id, $create_new_order_payment_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewPipelinesCardPaymentAsyncWithHttpInfo
     *
     * Додавання нової оплати для існуючої картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewPipelinesCardPaymentAsyncWithHttpInfo($card_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewPipelinesCardPayment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Payment';
        $request = $this->createNewPipelinesCardPaymentRequest($card_id, $create_new_order_payment_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewPipelinesCardPayment'
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\CreateNewOrderPaymentRequest $create_new_order_payment_request Приклад об&#39;єкту запиту для створення нової оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewPipelinesCardPaymentRequest($card_id, $create_new_order_payment_request, $accept = null, string $contentType = self::contentTypes['createNewPipelinesCardPayment'][0])
    {

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling createNewPipelinesCardPayment'
            );
        }

        // verify the required parameter 'create_new_order_payment_request' is set
        if ($create_new_order_payment_request === null || (is_array($create_new_order_payment_request) && count($create_new_order_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_new_order_payment_request when calling createNewPipelinesCardPayment'
            );
        }



        $resourcePath = '/pipelines/cards/{cardId}/payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_new_order_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_new_order_payment_request));
            } else {
                $httpBody = $create_new_order_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFileFromCard
     *
     * Видалення файлу з картки воронки
     *
     * @param  string $card_id Ідентифікатор картки воронки (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachTagToOrder202Response
     */
    public function deleteFileFromCard($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromCard'][0])
    {
        list($response) = $this->deleteFileFromCardWithHttpInfo($card_id, $file_id, $accept, $contentType);
        return $response;
    }

    /**
     * Operation deleteFileFromCardWithHttpInfo
     *
     * Видалення файлу з картки воронки
     *
     * @param  string $card_id Ідентифікатор картки воронки (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachTagToOrder202Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFileFromCardWithHttpInfo($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromCard'][0])
    {
        $request = $this->deleteFileFromCardRequest($card_id, $file_id, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachTagToOrder202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachTagToOrder202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFileFromCardAsync
     *
     * Видалення файлу з картки воронки
     *
     * @param  string $card_id Ідентифікатор картки воронки (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileFromCardAsync($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromCard'][0])
    {
        return $this->deleteFileFromCardAsyncWithHttpInfo($card_id, $file_id, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFileFromCardAsyncWithHttpInfo
     *
     * Видалення файлу з картки воронки
     *
     * @param  string $card_id Ідентифікатор картки воронки (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFileFromCardAsyncWithHttpInfo($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromCard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
        $request = $this->deleteFileFromCardRequest($card_id, $file_id, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFileFromCard'
     *
     * @param  string $card_id Ідентифікатор картки воронки (required)
     * @param  string $file_id Ідентифікатор файлу (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFileFromCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFileFromCardRequest($card_id, $file_id, $accept = null, string $contentType = self::contentTypes['deleteFileFromCard'][0])
    {

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling deleteFileFromCard'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteFileFromCard'
            );
        }



        $resourcePath = '/pipelines/cards/{cardId}/attachment/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfPipelines
     *
     * Отримання списку воронок
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelines'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfPipelines200Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response
     */
    public function getPaginatedListOfPipelines($accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelines'][0])
    {
        list($response) = $this->getPaginatedListOfPipelinesWithHttpInfo($accept, $limit, $page, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfPipelinesWithHttpInfo
     *
     * Отримання списку воронок
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelines'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfPipelines200Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfPipelinesWithHttpInfo($accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelines'][0])
    {
        $request = $this->getPaginatedListOfPipelinesRequest($accept, $limit, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPipelines200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfPipelinesAsync
     *
     * Отримання списку воронок
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfPipelinesAsync($accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelines'][0])
    {
        return $this->getPaginatedListOfPipelinesAsyncWithHttpInfo($accept, $limit, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfPipelinesAsyncWithHttpInfo
     *
     * Отримання списку воронок
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfPipelinesAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelines'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPipelines200Response';
        $request = $this->getPaginatedListOfPipelinesRequest($accept, $limit, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfPipelines'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelines'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfPipelinesRequest($accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelines'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PipelinesApi.getPaginatedListOfPipelines, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PipelinesApi.getPaginatedListOfPipelines, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/pipelines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfPipelinesCards
     *
     * Отримання списку карток воронок
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку карток воронок (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesCards'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response
     */
    public function getPaginatedListOfPipelinesCards($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfPipelinesCards'][0])
    {
        list($response) = $this->getPaginatedListOfPipelinesCardsWithHttpInfo($accept, $limit, $page, $include, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfPipelinesCardsWithHttpInfo
     *
     * Отримання списку карток воронок
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку карток воронок (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesCards'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfPipelinesCardsWithHttpInfo($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfPipelinesCards'][0])
    {
        $request = $this->getPaginatedListOfPipelinesCardsRequest($accept, $limit, $page, $include, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfPipelinesCardsAsync
     *
     * Отримання списку карток воронок
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку карток воронок (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesCards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfPipelinesCardsAsync($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfPipelinesCards'][0])
    {
        return $this->getPaginatedListOfPipelinesCardsAsyncWithHttpInfo($accept, $limit, $page, $include, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfPipelinesCardsAsyncWithHttpInfo
     *
     * Отримання списку карток воронок
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку карток воронок (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesCards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfPipelinesCardsAsyncWithHttpInfo($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfPipelinesCards'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response';
        $request = $this->getPaginatedListOfPipelinesCardsRequest($accept, $limit, $page, $include, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfPipelinesCards'
     *
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  object $filter Фільтрація списку карток воронок (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesCards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfPipelinesCardsRequest($accept = null, $limit = 15, $page = 1, $include = null, $filter = null, string $contentType = self::contentTypes['getPaginatedListOfPipelinesCards'][0])
    {


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PipelinesApi.getPaginatedListOfPipelinesCards, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PipelinesApi.getPaginatedListOfPipelinesCards, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/pipelines/cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'object', // openApiType
            'deepObject', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaginatedListOfPipelinesStatuses
     *
     * Отримання статусів воронки
     *
     * @param  string $pipeline_id Ідентифікатор воронки (required)
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesStatuses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfPipelinesStatuses200Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response
     */
    public function getPaginatedListOfPipelinesStatuses($pipeline_id, $accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelinesStatuses'][0])
    {
        list($response) = $this->getPaginatedListOfPipelinesStatusesWithHttpInfo($pipeline_id, $accept, $limit, $page, $contentType);
        return $response;
    }

    /**
     * Operation getPaginatedListOfPipelinesStatusesWithHttpInfo
     *
     * Отримання статусів воронки
     *
     * @param  string $pipeline_id Ідентифікатор воронки (required)
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesStatuses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfPipelinesStatuses200Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaginatedListOfPipelinesStatusesWithHttpInfo($pipeline_id, $accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelinesStatuses'][0])
    {
        $request = $this->getPaginatedListOfPipelinesStatusesRequest($pipeline_id, $accept, $limit, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelinesStatuses200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelinesStatuses200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesStatuses200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesStatuses200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesStatuses200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaginatedListOfPipelinesStatusesAsync
     *
     * Отримання статусів воронки
     *
     * @param  string $pipeline_id Ідентифікатор воронки (required)
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfPipelinesStatusesAsync($pipeline_id, $accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelinesStatuses'][0])
    {
        return $this->getPaginatedListOfPipelinesStatusesAsyncWithHttpInfo($pipeline_id, $accept, $limit, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaginatedListOfPipelinesStatusesAsyncWithHttpInfo
     *
     * Отримання статусів воронки
     *
     * @param  string $pipeline_id Ідентифікатор воронки (required)
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaginatedListOfPipelinesStatusesAsyncWithHttpInfo($pipeline_id, $accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelinesStatuses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesStatuses200Response';
        $request = $this->getPaginatedListOfPipelinesStatusesRequest($pipeline_id, $accept, $limit, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaginatedListOfPipelinesStatuses'
     *
     * @param  string $pipeline_id Ідентифікатор воронки (required)
     * @param  string $accept application/json (optional)
     * @param  int $limit Максимальна кількість елементів у пагінованому списку. Максимум 50. (optional, default to 15)
     * @param  int $page Вкажіть сторінку (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPaginatedListOfPipelinesStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPaginatedListOfPipelinesStatusesRequest($pipeline_id, $accept = null, $limit = 15, $page = 1, string $contentType = self::contentTypes['getPaginatedListOfPipelinesStatuses'][0])
    {

        // verify the required parameter 'pipeline_id' is set
        if ($pipeline_id === null || (is_array($pipeline_id) && count($pipeline_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pipeline_id when calling getPaginatedListOfPipelinesStatuses'
            );
        }


        if ($limit !== null && $limit > 50) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PipelinesApi.getPaginatedListOfPipelinesStatuses, must be smaller than or equal to 50.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling PipelinesApi.getPaginatedListOfPipelinesStatuses, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/pipelines/{pipelineId}/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($pipeline_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pipelineId' . '}',
                ObjectSerializer::toPathValue($pipeline_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPipelinesCard
     *
     * Отримання картки воронки
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPipelinesCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response
     */
    public function getPipelinesCard($card_id, $accept = null, $include = null, string $contentType = self::contentTypes['getPipelinesCard'][0])
    {
        list($response) = $this->getPipelinesCardWithHttpInfo($card_id, $accept, $include, $contentType);
        return $response;
    }

    /**
     * Operation getPipelinesCardWithHttpInfo
     *
     * Отримання картки воронки
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPipelinesCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPipelinesCardWithHttpInfo($card_id, $accept = null, $include = null, string $contentType = self::contentTypes['getPipelinesCard'][0])
    {
        $request = $this->getPipelinesCardRequest($card_id, $accept, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPipelinesCardAsync
     *
     * Отримання картки воронки
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPipelinesCardAsync($card_id, $accept = null, $include = null, string $contentType = self::contentTypes['getPipelinesCard'][0])
    {
        return $this->getPipelinesCardAsyncWithHttpInfo($card_id, $accept, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPipelinesCardAsyncWithHttpInfo
     *
     * Отримання картки воронки
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPipelinesCardAsyncWithHttpInfo($card_id, $accept = null, $include = null, string $contentType = self::contentTypes['getPipelinesCard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPaginatedListOfPipelinesCards200Response';
        $request = $this->getPipelinesCardRequest($card_id, $accept, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPipelinesCard'
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $accept application/json (optional)
     * @param  string $include Підключення додаткових асоціацій, розділені комами. Приклад: &lt;strong&gt;contact,products.offer,manager&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt; Допустимі асоціації &#x60;contact.client&#x60;, &#x60;products&#x60;, &#x60;manager&#x60;, &#x60;status&#x60;, &#x60;payments&#x60;,  &#x60;custom_fields&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPipelinesCardRequest($card_id, $accept = null, $include = null, string $contentType = self::contentTypes['getPipelinesCard'][0])
    {

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling getPipelinesCard'
            );
        }




        $resourcePath = '/pipelines/cards/{cardId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExistingPipelinesCardPayment
     *
     * Оновлення оплати для існуючої картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Payment|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response
     */
    public function updateExistingPipelinesCardPayment($card_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingPipelinesCardPayment'][0])
    {
        list($response) = $this->updateExistingPipelinesCardPaymentWithHttpInfo($card_id, $payment_id, $update_existing_order_payment_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation updateExistingPipelinesCardPaymentWithHttpInfo
     *
     * Оновлення оплати для існуючої картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Payment|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExistingPipelinesCardPaymentWithHttpInfo($card_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingPipelinesCardPayment'][0])
    {
        $request = $this->updateExistingPipelinesCardPaymentRequest($card_id, $payment_id, $update_existing_order_payment_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\Payment' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Payment' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Payment', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Payment';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExistingPipelinesCardPaymentAsync
     *
     * Оновлення оплати для існуючої картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingPipelinesCardPaymentAsync($card_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingPipelinesCardPayment'][0])
    {
        return $this->updateExistingPipelinesCardPaymentAsyncWithHttpInfo($card_id, $payment_id, $update_existing_order_payment_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExistingPipelinesCardPaymentAsyncWithHttpInfo
     *
     * Оновлення оплати для існуючої картки у воронці
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExistingPipelinesCardPaymentAsyncWithHttpInfo($card_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingPipelinesCardPayment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Payment';
        $request = $this->updateExistingPipelinesCardPaymentRequest($card_id, $payment_id, $update_existing_order_payment_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExistingPipelinesCardPayment'
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  string $payment_id Ідентифікатор оплати (required)
     * @param  \OpenAPI\Client\Model\UpdateExistingOrderPaymentRequest $update_existing_order_payment_request Приклад об&#39;єкту запиту для оновлення оплати (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExistingPipelinesCardPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateExistingPipelinesCardPaymentRequest($card_id, $payment_id, $update_existing_order_payment_request, $accept = null, string $contentType = self::contentTypes['updateExistingPipelinesCardPayment'][0])
    {

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling updateExistingPipelinesCardPayment'
            );
        }

        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling updateExistingPipelinesCardPayment'
            );
        }

        // verify the required parameter 'update_existing_order_payment_request' is set
        if ($update_existing_order_payment_request === null || (is_array($update_existing_order_payment_request) && count($update_existing_order_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_existing_order_payment_request when calling updateExistingPipelinesCardPayment'
            );
        }



        $resourcePath = '/pipelines/cards/{cardId}/payment/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_existing_order_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_existing_order_payment_request));
            } else {
                $httpBody = $update_existing_order_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePipelinesCard
     *
     * Оновлення картки воронки
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\UpdatePipelinesCardRequest $update_pipelines_card_request Приклад об&#39;єкту запиту для оновлення картки воронки (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePipelinesCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AttachTagToOrder202Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response
     */
    public function updatePipelinesCard($card_id, $update_pipelines_card_request, $accept = null, string $contentType = self::contentTypes['updatePipelinesCard'][0])
    {
        list($response) = $this->updatePipelinesCardWithHttpInfo($card_id, $update_pipelines_card_request, $accept, $contentType);
        return $response;
    }

    /**
     * Operation updatePipelinesCardWithHttpInfo
     *
     * Оновлення картки воронки
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\UpdatePipelinesCardRequest $update_pipelines_card_request Приклад об&#39;єкту запиту для оновлення картки воронки (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePipelinesCard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AttachTagToOrder202Response|\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePipelinesCardWithHttpInfo($card_id, $update_pipelines_card_request, $accept = null, string $contentType = self::contentTypes['updatePipelinesCard'][0])
    {
        $request = $this->updatePipelinesCardRequest($card_id, $update_pipelines_card_request, $accept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AttachTagToOrder202Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AttachTagToOrder202Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AttachTagToOrder202Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPaginatedListOfPipelines400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePipelinesCardAsync
     *
     * Оновлення картки воронки
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\UpdatePipelinesCardRequest $update_pipelines_card_request Приклад об&#39;єкту запиту для оновлення картки воронки (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePipelinesCardAsync($card_id, $update_pipelines_card_request, $accept = null, string $contentType = self::contentTypes['updatePipelinesCard'][0])
    {
        return $this->updatePipelinesCardAsyncWithHttpInfo($card_id, $update_pipelines_card_request, $accept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePipelinesCardAsyncWithHttpInfo
     *
     * Оновлення картки воронки
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\UpdatePipelinesCardRequest $update_pipelines_card_request Приклад об&#39;єкту запиту для оновлення картки воронки (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePipelinesCardAsyncWithHttpInfo($card_id, $update_pipelines_card_request, $accept = null, string $contentType = self::contentTypes['updatePipelinesCard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AttachTagToOrder202Response';
        $request = $this->updatePipelinesCardRequest($card_id, $update_pipelines_card_request, $accept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePipelinesCard'
     *
     * @param  string $card_id Ідентифікатор картки у воронці (required)
     * @param  \OpenAPI\Client\Model\UpdatePipelinesCardRequest $update_pipelines_card_request Приклад об&#39;єкту запиту для оновлення картки воронки (required)
     * @param  string $accept application/json (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePipelinesCard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePipelinesCardRequest($card_id, $update_pipelines_card_request, $accept = null, string $contentType = self::contentTypes['updatePipelinesCard'][0])
    {

        // verify the required parameter 'card_id' is set
        if ($card_id === null || (is_array($card_id) && count($card_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_id when calling updatePipelinesCard'
            );
        }

        // verify the required parameter 'update_pipelines_card_request' is set
        if ($update_pipelines_card_request === null || (is_array($update_pipelines_card_request) && count($update_pipelines_card_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_pipelines_card_request when calling updatePipelinesCard'
            );
        }



        $resourcePath = '/pipelines/cards/{cardId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }

        // path params
        if ($card_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cardId' . '}',
                ObjectSerializer::toPathValue($card_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_pipelines_card_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_pipelines_card_request));
            } else {
                $httpBody = $update_pipelines_card_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
