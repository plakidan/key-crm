<?php
/**
 * OrderApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KeyCRM OpenAPI documentation
 *
 * Опис REST маршрутів для роботи з KeyCRM OpenAPI.<br><br> <b>Зверніть увагу:</b> <br> 1. Для авторизації потрібно передавати заголовок у форматі Bearer + <a href=\"https://help.keycrm.app/uk/process-automation-api-and-more/where-to-get-an-api-key\" target=\"_blank\">APIkey</a> (authorization:[Bearer `ваш-API-ключ`]); <br> 2. Є обмеження до 60 запитів на хвилину з однієї IP-адреси по API-ключу; <br> 3. Час у всіх сутностях використовується UTC (GMT+0) - при зчитуванні (GET-запити), при виборі (фільтрації) по часу створення сутності, а також при створенні сутностей (POST).
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrderApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for attachFileToOrder
     *
     * Додавання файлу для існуючого замовлення.
     *
     */
    public function testAttachFileToOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for attachTagToOrder
     *
     * Додавання тегу для існуючого замовлення.
     *
     */
    public function testAttachTagToOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewOrder
     *
     * Створення нового замовлення.
     *
     */
    public function testCreateNewOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewOrderExpense
     *
     * Додавання нової витрати для існуючого замовлення.
     *
     */
    public function testCreateNewOrderExpense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewOrderImport
     *
     * Створення нових замовлень списком.
     *
     */
    public function testCreateNewOrderImport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewOrderPayment
     *
     * Додавання нової оплати для існуючого замовлення.
     *
     */
    public function testCreateNewOrderPayment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteFileFromOrder
     *
     * Видалення файлу із існуючого замовлення.
     *
     */
    public function testDeleteFileFromOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteTagFromOrder
     *
     * Видалення тегу з існуючого замовлення.
     *
     */
    public function testDeleteTagFromOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderById
     *
     * Отримання сутності замовлення за ідентифікатором.
     *
     */
    public function testGetOrderById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaginatedListOfDeliveryServices
     *
     * Отримання списку доступних методів доставки.
     *
     */
    public function testGetPaginatedListOfDeliveryServices()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaginatedListOfExpenseTypes
     *
     * Отримання списку типів витрат.
     *
     */
    public function testGetPaginatedListOfExpenseTypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaginatedListOfOrders
     *
     * Отримання списку замовлень.
     *
     */
    public function testGetPaginatedListOfOrders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaginatedListOfPaymentMethods
     *
     * Отримання списку платіжних методів.
     *
     */
    public function testGetPaginatedListOfPaymentMethods()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaginatedListOfProductStatuses
     *
     * Отримання списку статусів товарів.
     *
     */
    public function testGetPaginatedListOfProductStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaginatedListOfSources
     *
     * Отримання списку джерел.
     *
     */
    public function testGetPaginatedListOfSources()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaginatedListOfStatuses
     *
     * Отримання списку статусів.
     *
     */
    public function testGetPaginatedListOfStatuses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPaginatedListOfTags
     *
     * Отримання списку тегів.
     *
     */
    public function testGetPaginatedListOfTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateExistingOrder
     *
     * Оновлення існуючого замовлення.
     *
     */
    public function testUpdateExistingOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateExistingOrderExpense
     *
     * Оновлення витрати для існуючого замовлення.
     *
     */
    public function testUpdateExistingOrderExpense()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateExistingOrderPayment
     *
     * Оновлення оплати для існуючого замовлення.
     *
     */
    public function testUpdateExistingOrderPayment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
